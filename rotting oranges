from collections import deque
from typing import List

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        q = deque()
        time, fresh = 0, 0
        ROWS, COLS = len(grid), len(grid[0])

        # Step 1: Count fresh oranges and enqueue all rotten oranges
        for r in range(ROWS):
            for c in range(COLS):  # Fixed typo: rnage -> range
                if grid[r][c] == 1:
                    fresh += 1
                elif grid[r][c] == 2:
                    q.append((r, c))  # Rotten oranges' positions

        # Directions: right, down, left, up
        directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]

        # Step 2: BFS from rotten oranges
        while q and fresh > 0:
            for _ in range(len(q)):
                r, c = q.popleft()  # Fixed: use popleft() for BFS
                for dr, dc in directions:
                    nr, nc = r + dr, c + dc
                    if 0 <= nr < ROWS and 0 <= nc < COLS and grid[nr][nc] == 1:
                        grid[nr][nc] = 2  # Make it rotten
                        fresh -= 1
                        q.append((nr, nc))
            time += 1  # Increase time after each round of spread

        # Step 3: Return the result
        return time if fresh == 0 else -1
