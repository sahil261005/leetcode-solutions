class Solution:
    def longestPalindrome(self, s: str) -> str:
        if not s:
            return ""
        
        start = 0
        max_len = 1
        
        def expand_around_center(left, right):
            """Expand around center and return length of palindrome"""
            while left >= 0 and right < len(s) and s[left] == s[right]:
                left -= 1
                right += 1
            return right - left - 1
        
        for i in range(len(s)):
            # Check for odd length palindromes (center at i)
            len1 = expand_around_center(i, i)
            
            # Check for even length palindromes (center between i and i+1)
            len2 = expand_around_center(i, i + 1)
            
            # Get max length palindrome centered at current position
            curr_len = max(len1, len2)
            
            # Update global maximum if current is longer
            if curr_len > max_len:
                max_len = curr_len
                start = i - (curr_len - 1) // 2
        
        return s[start:start + max_len]
            
