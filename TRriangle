from typing import List

class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        n = len(triangle)
        dp = [[0] * len(row) for row in triangle]

        dp[0][0] = triangle[0][0]

    
        for i in range(1, n):
            for j in range(len(triangle[i])):
                if j == 0:
                    # First element in the row → only one path (from above)
                    dp[i][j] = triangle[i][j] + dp[i - 1][j]
                elif j == i:
                    # Last element in the row → only one path (from above-left)
                    dp[i][j] = triangle[i][j] + dp[i - 1][j - 1]
                else:
                    # Middle elements → choose min of two possible paths
                    dp[i][j] = triangle[i][j] + min(dp[i - 1][j - 1], dp[i - 1][j])

        # Return min value from the last row
        return min(dp[-1])
